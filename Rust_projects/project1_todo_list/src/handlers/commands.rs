use teloxide::{prelude::*, utils::command::BotCommands};

use crate::models::{UserState, UserStates};
use crate::storage::StorageType;
use crate::utils::{create_main_menu, create_todo_menu};

#[derive(BotCommands, Clone)]
#[command(rename_rule = "lowercase", description = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")]
pub enum Command {
    #[command(description = "–Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")]
    Start,
    #[command(description = "–ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å")]
    Help,
    #[command(description = "–¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")]
    Add(String),
    #[command(description = "–ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏")]
    List,
    #[command(description = "–æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é")]
    Done(String),
    #[command(description = "—É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")]
    Remove(String),
    #[command(description = "–æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏")]
    Clear,
    #[command(description = "—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)")]
    TestReminders,
}

pub async fn handle_command(
    bot: Bot,
    msg: Message,
    command: Command,
    storage: StorageType,
    user_states: UserStates,
) -> ResponseResult<()> {
    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ª—é–±–æ–π –∫–æ–º–∞–Ω–¥–µ
    {
        let mut states = user_states.lock().await;
        states.insert(msg.chat.id, UserState::Default);
    }

    match command {
        Command::Start => {
            let welcome_text = "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Todo Bot!\n\n\
                –Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á. \
                –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:";
            
            bot.send_message(msg.chat.id, welcome_text)
                .reply_markup(create_main_menu())
                .await?;
        }
        Command::Help => {
            let help_text = "üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n\
                üîπ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã\n\
                üîπ –ò–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n\n\
                /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\
                /add <—Ç–µ–∫—Å—Ç> - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n\
                /list - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏\n\
                /done <–Ω–æ–º–µ—Ä> - –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π\n\
                /remove <–Ω–æ–º–µ—Ä> - —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É\n\
                /clear - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏\n\n\
                üí° –°–æ–≤–µ—Ç: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ - —ç—Ç–æ —É–¥–æ–±–Ω–µ–µ!";
            
            bot.send_message(msg.chat.id, help_text)
                .reply_markup(create_main_menu())
                .await?;
        }
        Command::Add(task_text) => {
            if task_text.trim().is_empty() {
                bot.send_message(msg.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏. –ü—Ä–∏–º–µ—Ä: /add –ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ")
                    .reply_markup(create_todo_menu())
                    .await?;
                return Ok(());
            }

            if let Err(_) = storage.add_task(msg.chat.id, task_text.trim()).await {
                bot.send_message(msg.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏")
                    .reply_markup(create_todo_menu())
                    .await?;
                return Ok(());
            }
            
            bot.send_message(msg.chat.id, format!("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {}", task_text.trim()))
                .reply_markup(create_todo_menu())
                .await?;
        }
        Command::List => {
            let todos = storage.get_tasks(msg.chat.id).await;

            if !todos.is_empty() {
                let mut response = "üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n".to_string();
                for (index, todo) in todos.iter().enumerate() {
                    let status = if todo.is_completed() { "‚úÖ" } else { "‚è≥" };
                    response.push_str(&format!("{}. {} {}\n", index + 1, status, todo.text));
                }
                bot.send_message(msg.chat.id, response)
                    .reply_markup(create_todo_menu())
                    .await?;
            } else {
                bot.send_message(msg.chat.id, "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
                    .reply_markup(create_todo_menu())
                    .await?;
            }
        }
        Command::Done(task_number) => {
            let task_index: usize = match task_number.parse::<usize>() {
                Ok(num) if num > 0 => num - 1,
                _ => {
                    bot.send_message(msg.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏. –ü—Ä–∏–º–µ—Ä: /done 1")
                        .reply_markup(create_todo_menu())
                        .await?;
                    return Ok(());
                }
            };

            match storage.mark_task_completed(msg.chat.id, task_index).await {
                Ok(task_text) => {
                    bot.send_message(msg.chat.id, format!("‚úÖ –ó–∞–¥–∞—á–∞ \"{}\" –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!", task_text))
                        .reply_markup(create_todo_menu())
                        .await?;
                }
                Err(error) => {
                    bot.send_message(msg.chat.id, format!("‚ùå {}", error))
                        .reply_markup(create_todo_menu())
                        .await?;
                }
            }
        }
        Command::Remove(task_number) => {
            let task_index: usize = match task_number.parse::<usize>() {
                Ok(num) if num > 0 => num - 1,
                _ => {
                    bot.send_message(msg.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏. –ü—Ä–∏–º–µ—Ä: /remove 1")
                        .reply_markup(create_todo_menu())
                        .await?;
                    return Ok(());
                }
            };

            match storage.remove_task(msg.chat.id, task_index).await {
                Ok(task_text) => {
                    bot.send_message(msg.chat.id, format!("üóëÔ∏è –ó–∞–¥–∞—á–∞ \"{}\" —É–¥–∞–ª–µ–Ω–∞", task_text))
                        .reply_markup(create_todo_menu())
                        .await?;
                }
                Err(error) => {
                    bot.send_message(msg.chat.id, format!("‚ùå {}", error))
                        .reply_markup(create_todo_menu())
                        .await?;
                }
            }
        }
        Command::Clear => {
            if let Err(_) = storage.clear_tasks(msg.chat.id).await {
                bot.send_message(msg.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∑–∞–¥–∞—á")
                    .reply_markup(create_todo_menu())
                    .await?;
                return Ok(());
            }
            
            bot.send_message(msg.chat.id, "üßπ –í—Å–µ –∑–∞–¥–∞—á–∏ –æ—á–∏—â–µ–Ω—ã")
                .reply_markup(create_todo_menu())
                .await?;
        }
        Command::TestReminders => {
            // –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            bot.send_message(msg.chat.id, "üß™ –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É")
                .reply_markup(create_main_menu())
                .await?;
        }
    }
    Ok(())
}