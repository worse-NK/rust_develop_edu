use teloxide::prelude::*;

use crate::models::{UserState, UserStates};
use crate::storage::MemoryStorage;
use crate::utils::{create_main_menu, parse_task_list};

pub async fn handle_text_message(
    bot: Bot,
    msg: Message,
    storage: MemoryStorage,
    user_states: UserStates,
) -> ResponseResult<()> {
    let text = match msg.text() {
        Some(text) => text.trim(),
        None => return Ok(()),
    };

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
    if text.len() > 4000 {
        bot.send_message(msg.chat.id, "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤.")
            .reply_markup(create_main_menu())
            .await?;
        return Ok(());
    }

    let current_state = {
        let states = user_states.lock().await;
        states.get(&msg.chat.id).cloned().unwrap_or_default()
    };

    match current_state {
        UserState::WaitingForTask => {
            if text.is_empty() {
                bot.send_message(msg.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
                    .await?;
                return Ok(());
            }

            storage.add_task(msg.chat.id, text).await;
            
            // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
            {
                let mut states = user_states.lock().await;
                states.insert(msg.chat.id, UserState::Default);
            }

            bot.send_message(msg.chat.id, format!("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {}", text))
                .reply_markup(create_main_menu())
                .await?;
        }
        UserState::WaitingForTaskList => {
            if text.is_empty() {
                bot.send_message(msg.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:")
                    .await?;
                return Ok(());
            }

            let tasks = parse_task_list(text);
            if tasks.is_empty() {
                bot.send_message(msg.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                    .await?;
                return Ok(());
            }

            for task in &tasks {
                storage.add_task(msg.chat.id, task).await;
            }

            // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
            {
                let mut states = user_states.lock().await;
                states.insert(msg.chat.id, UserState::Default);
            }

            bot.send_message(
                msg.chat.id, 
                format!("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {} –∑–∞–¥–∞—á:\n{}", 
                    tasks.len(), 
                    tasks.iter().enumerate()
                        .map(|(i, task)| format!("{}. {}", i + 1, task))
                        .collect::<Vec<_>>()
                        .join("\n")
                )
            )
            .reply_markup(create_main_menu())
            .await?;
        }
        UserState::WaitingForTaskNumber => {
            match text.parse::<usize>() {
                Ok(num) if num > 0 => {
                    let task_index = num - 1;
                    
                    match storage.mark_task_completed(msg.chat.id, task_index).await {
                        Ok(task_text) => {
                            // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
                            {
                                let mut states = user_states.lock().await;
                                states.insert(msg.chat.id, UserState::Default);
                            }

                            bot.send_message(msg.chat.id, format!("‚úÖ –ó–∞–¥–∞—á–∞ \"{}\" –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!", task_text))
                                .reply_markup(create_main_menu())
                                .await?;
                        }
                        Err(_) => {
                            bot.send_message(msg.chat.id, "‚ùå –ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                                .await?;
                        }
                    }
                }
                _ => {
                    bot.send_message(msg.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏:")
                        .await?;
                }
            }
        }
        UserState::Default => {
            bot.send_message(msg.chat.id, "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã.")
                .reply_markup(create_main_menu())
                .await?;
        }
    }

    Ok(())
}