use teloxide::prelude::*;

use crate::models::{UserState, UserStates, CounterType, CounterReminder};
use crate::storage::JsonStorage;
use crate::utils::{create_main_menu, create_todo_menu, create_reminder_menu, parse_task_list};

pub async fn handle_text_message(
    bot: Bot,
    msg: Message,
    storage: JsonStorage,
    user_states: UserStates,
) -> ResponseResult<()> {
    let text = match msg.text() {
        Some(text) => text.trim(),
        None => return Ok(()),
    };

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
    if text.len() > 4000 {
        bot.send_message(msg.chat.id, "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤.")
            .reply_markup(create_todo_menu())
            .await?;
        return Ok(());
    }

    let current_state = {
        let states = user_states.lock().await;
        states.get(&msg.chat.id).cloned().unwrap_or_default()
    };

    match current_state {
        UserState::WaitingForTask => {
            if text.is_empty() {
                bot.send_message(msg.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
                    .await?;
                return Ok(());
            }

            if let Err(_) = storage.add_task(msg.chat.id, text).await {
                bot.send_message(msg.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏")
                    .reply_markup(create_todo_menu())
                    .await?;
                return Ok(());
            }
            
            // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
            {
                let mut states = user_states.lock().await;
                states.insert(msg.chat.id, UserState::Default);
            }

            bot.send_message(msg.chat.id, format!("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {}", text))
                .reply_markup(create_todo_menu())
                .await?;
        }
        UserState::WaitingForTaskList => {
            if text.is_empty() {
                bot.send_message(msg.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:")
                    .await?;
                return Ok(());
            }

            let tasks = parse_task_list(text);
            if tasks.is_empty() {
                bot.send_message(msg.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                    .await?;
                return Ok(());
            }

            let mut added_count = 0;
            for task in &tasks {
                if let Ok(_) = storage.add_task(msg.chat.id, task).await {
                    added_count += 1;
                }
            }

            // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
            {
                let mut states = user_states.lock().await;
                states.insert(msg.chat.id, UserState::Default);
            }

            if added_count > 0 {
                bot.send_message(
                    msg.chat.id, 
                    format!("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {} –∑–∞–¥–∞—á:\n{}", 
                        added_count, 
                        tasks.iter().enumerate()
                            .take(added_count)
                            .map(|(i, task)| format!("{}. {}", i + 1, task))
                            .collect::<Vec<_>>()
                            .join("\n")
                    )
                )
                .reply_markup(create_todo_menu())
                .await?;
            } else {
                bot.send_message(msg.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á")
                    .reply_markup(create_todo_menu())
                    .await?;
            }
        }
        UserState::WaitingForTaskNumber => {
            match text.parse::<usize>() {
                Ok(num) if num > 0 => {
                    let task_index = num - 1;
                    
                    match storage.mark_task_completed(msg.chat.id, task_index).await {
                        Ok(task_text) => {
                            // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
                            {
                                let mut states = user_states.lock().await;
                                states.insert(msg.chat.id, UserState::Default);
                            }

                            bot.send_message(msg.chat.id, format!("‚úÖ –ó–∞–¥–∞—á–∞ \"{}\" –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!", task_text))
                                .reply_markup(create_todo_menu())
                                .await?;
                        }
                        Err(_) => {
                            bot.send_message(msg.chat.id, "‚ùå –ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                                .await?;
                        }
                    }
                }
                _ => {
                    bot.send_message(msg.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏:")
                        .await?;
                }
            }
        }
        UserState::WaitingForRemovalNumber => {
            match text.parse::<usize>() {
                Ok(num) if num > 0 => {
                    let task_index = num - 1;
                    
                    match storage.remove_task(msg.chat.id, task_index).await {
                        Ok(task_text) => {
                            {
                                let mut states = user_states.lock().await;
                                states.insert(msg.chat.id, UserState::Default);
                            }
                            
                            bot.send_message(msg.chat.id, format!("üóëÔ∏è –ó–∞–¥–∞—á–∞ \"{}\" —É–¥–∞–ª–µ–Ω–∞", task_text))
                                .reply_markup(create_todo_menu())
                                .await?;
                        }
                        Err(_) => {
                            bot.send_message(msg.chat.id, "‚ùå –ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                                .await?;
                        }
                    }
                }
                _ => {
                    bot.send_message(msg.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏:")
                        .await?;
                }
            }
        }
        UserState::WaitingForWaterPeriod => {
            handle_period_input(bot, msg.chat.id, storage, user_states, text, CounterType::Water).await?;
        }
        UserState::WaitingForElectricityPeriod => {
            handle_period_input(bot, msg.chat.id, storage, user_states, text, CounterType::Electricity).await?;
        }
        UserState::Default => {
            bot.send_message(msg.chat.id, "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã.")
                .reply_markup(create_main_menu())
                .await?;
        }
    }

    Ok(())
}

async fn handle_period_input(
    bot: Bot,
    chat_id: ChatId,
    storage: JsonStorage,
    user_states: UserStates,
    text: &str,
    counter_type: CounterType,
) -> ResponseResult<()> {
    // –ü–∞—Ä—Å–∏–º –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–Ω–∞—á–∞–ª–æ-–∫–æ–Ω–µ—Ü"
    let parts: Vec<&str> = text.split('-').collect();
    if parts.len() != 2 {
        bot.send_message(
            chat_id,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: **–Ω–∞—á–∞–ª–æ-–∫–æ–Ω–µ—Ü**\n\
            –ù–∞–ø—Ä–∏–º–µ—Ä: `16-25` –∏–ª–∏ `1-10`"
        ).await?;
        return Ok(());
    }

    let start_day: u32 = match parts[0].trim().parse() {
        Ok(day) if day >= 1 && day <= 31 => day,
        _ => {
            bot.send_message(
                chat_id,
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –¥–µ–Ω—å –Ω–∞—á–∞–ª–∞. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 31."
            ).await?;
            return Ok(());
        }
    };

    let end_day: u32 = match parts[1].trim().parse() {
        Ok(day) if day >= 1 && day <= 31 => day,
        _ => {
            bot.send_message(
                chat_id,
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –¥–µ–Ω—å –æ–∫–æ–Ω—á–∞–Ω–∏—è. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 31."
            ).await?;
            return Ok(());
        }
    };

    if start_day > end_day {
        bot.send_message(
            chat_id,
            "‚ùå –î–µ–Ω—å –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –¥–Ω—è –æ–∫–æ–Ω—á–∞–Ω–∏—è."
        ).await?;
        return Ok(());
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    let reminder = CounterReminder::new(counter_type.clone(), start_day, end_day);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º
    match storage.add_counter_reminder(chat_id, reminder).await {
        Ok(_) => {
            // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
            {
                let mut states = user_states.lock().await;
                states.insert(chat_id, UserState::Default);
            }

            bot.send_message(
                chat_id,
                format!(
                    "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è {} –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!\n\n\
                    üìÖ –ü–µ—Ä–∏–æ–¥: —Å {} –ø–æ {} —á–∏—Å–ª–æ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞\n\
                    üîî –ë—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å:\n\
                    ‚Ä¢ –í –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –ø–µ—Ä–∏–æ–¥–∞ ({})\n\
                    ‚Ä¢ –í —Å–µ—Ä–µ–¥–∏–Ω–µ –ø–µ—Ä–∏–æ–¥–∞\n\
                    ‚Ä¢ –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è\n\n\
                    –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.",
                    counter_type.display_name(),
                    start_day,
                    end_day,
                    start_day
                )
            )
            .reply_markup(create_reminder_menu())
            .await?;
        }
        Err(_) => {
            bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
                .reply_markup(create_reminder_menu())
                .await?;
        }
    }

    Ok(())
}