use teloxide::prelude::*;

use crate::models::{UserState, UserStates};
use crate::storage::StorageType;
use crate::utils::{create_main_menu, create_todo_menu, create_reminder_menu, create_counters_menu};
use crate::models::CounterType;

pub async fn handle_callback(
    bot: Bot,
    q: CallbackQuery,
    storage: StorageType,
    user_states: UserStates,
) -> ResponseResult<()> {
    if let Some(data) = &q.data {
        let chat_id = q.message.as_ref().unwrap().chat.id;
        
        match data.as_str() {
            "todo_menu" => {
                bot.send_message(chat_id, "üìù TODO List ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
                    .reply_markup(create_todo_menu())
                    .await?;
            }
            "main_menu" => {
                bot.send_message(chat_id, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")
                    .reply_markup(create_main_menu())
                    .await?;
            }
            "add_task" => {
                {
                    let mut states = user_states.lock().await;
                    states.insert(chat_id, UserState::WaitingForTask);
                }
                
                bot.send_message(chat_id, "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏:")
                    .await?;
            }
            "add_list" => {
                {
                    let mut states = user_states.lock().await;
                    states.insert(chat_id, UserState::WaitingForTaskList);
                }
                
                bot.send_message(
                    chat_id, 
                    "üìù –í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á (–∫–∞–∂–¥–∞—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):\n\n\
                    –ü—Ä–∏–º–µ—Ä—ã:\n\
                    ‚Ä¢ –ö—É–ø–∏—Ç—å —Ö–ª–µ–±\n\
                    ‚Ä¢ –ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ\n\
                    ‚Ä¢ –°–¥–µ–ª–∞—Ç—å –¥–æ–º–∞—à–∫—É\n\n\
                    –ò–ª–∏:\n\
                    1. –ü–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞\n\
                    2. –í—Ç–æ—Ä–∞—è –∑–∞–¥–∞—á–∞\n\
                    3. –¢—Ä–µ—Ç—å—è –∑–∞–¥–∞—á–∞"
                ).await?;
            }
            "list_tasks" => {
                let todos = storage.get_tasks(chat_id).await;

                if !todos.is_empty() {
                    let mut response = "üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n".to_string();
                    for (index, todo) in todos.iter().enumerate() {
                        let status = if todo.is_completed() { "‚úÖ" } else { "‚è≥" };
                        response.push_str(&format!("{}. {} {}\n", index + 1, status, todo.text));
                    }
                    bot.send_message(chat_id, response)
                        .reply_markup(create_todo_menu())
                        .await?;
                } else {
                    bot.send_message(chat_id, "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
                        .reply_markup(create_todo_menu())
                        .await?;
                }
            }
            "mark_done" => {
                let todos = storage.get_tasks(chat_id).await;
                
                if !todos.is_empty() {
                    {
                        let mut states = user_states.lock().await;
                        states.insert(chat_id, UserState::WaitingForTaskNumber);
                    }
                    
                    bot.send_message(chat_id, "üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π:")
                        .await?;
                } else {
                    bot.send_message(chat_id, "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏.")
                        .reply_markup(create_todo_menu())
                        .await?;
                }
            }
            "remove_task" => {
                let todos = storage.get_tasks(chat_id).await;
                
                if !todos.is_empty() {
                    {
                        let mut states = user_states.lock().await;
                        states.insert(chat_id, UserState::WaitingForRemovalNumber);
                    }
                    
                    bot.send_message(chat_id, "üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
                        .await?;
                } else {
                    bot.send_message(chat_id, "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
                        .reply_markup(create_todo_menu())
                        .await?;
                }
            }
            "clear_all" => {
                if let Err(_) = storage.clear_tasks(chat_id).await {
                    bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∑–∞–¥–∞—á")
                        .reply_markup(create_todo_menu())
                        .await?;
                } else {
                    bot.send_message(chat_id, "üßπ –í—Å–µ –∑–∞–¥–∞—á–∏ –æ—á–∏—â–µ–Ω—ã")
                        .reply_markup(create_todo_menu())
                        .await?;
                }
            }
            "help" => {
                let help_text = "üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É\n\n\
                    –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á (TODO List) –∏ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –ø–æ–¥–∞—á–µ –ø–æ–∫–∞–∑–∞–Ω–∏–π —Å—á–µ—Ç—á–∏–∫–æ–≤.\n\n\
                    –†–∞–∑–¥–µ–ª—ã:\n\
                    ‚Ä¢ üìù TODO List ‚Äî –¥–æ–±–∞–≤–ª—è–π—Ç–µ –∑–∞–¥–∞—á–∏ –ø–æ –æ–¥–Ω–æ–π –∏–ª–∏ —Å–ø–∏—Å–∫–æ–º, —Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫, –æ—Ç–º–µ—á–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏, —É–¥–∞–ª—è–π—Ç–µ.\n\
                    ‚Ä¢ ‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ ‚Äî –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–∞—á–∏ –ø–æ–∫–∞–∑–∞–Ω–∏–π –ø–æ –≤–æ–¥–µ –∏ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤—É, –ø–æ–ª—É—á–∞–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –Ω—É–∂–Ω—ã–µ –¥–Ω–∏.\n\n\
                    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.";
                
                bot.send_message(chat_id, help_text)
                    .reply_markup(create_main_menu())
                    .await?;
            }
            "todo_help" => {
                let help_text = "üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ TODO List\n\n\
                    TODO List ‚Äî —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ –æ–¥–Ω–æ–π –∏–ª–∏ —Å–ø–∏—Å–∫–æ–º,\n\
                    –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–µ, –æ—Ç–º–µ—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –∏ —É–¥–∞–ª—è—Ç—å.\n\n\
                    –ö–æ–º–∞–Ω–¥—ã:\n\
                    ‚Ä¢ /add <—Ç–µ–∫—Å—Ç> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n\
                    ‚Ä¢ /list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏\n\
                    ‚Ä¢ /done <–Ω–æ–º–µ—Ä> ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π\n\
                    ‚Ä¢ /remove <–Ω–æ–º–µ—Ä> ‚Äî —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É\n\
                    ‚Ä¢ /clear ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏\n\n\
                    –ü–æ–¥—Å–∫–∞–∑–∫–∞: —É–¥–æ–±–Ω–µ–µ –≤—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é.";
                
                bot.send_message(chat_id, help_text)
                    .reply_markup(create_todo_menu())
                    .await?;
            }
            "reminder_menu" => {
                bot.send_message(chat_id, "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
                    .reply_markup(create_reminder_menu())
                    .await?;
            }
            "reminder_help" => {
                let help_text = "üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–µ\n\n\
                    –ó–¥–µ—Å—å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è –ø–µ—Ä–∏–æ–¥—ã –ø–æ–¥–∞—á–∏ –ø–æ–∫–∞–∑–∞–Ω–∏–π –ø–æ üíß –≤–æ–¥–µ –∏ ‚ö° —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤—É.\n\
                    –£–∫–∞–∂–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–Ω–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 16‚Äì25). –ë–æ—Ç –Ω–∞–ø–æ–º–Ω–∏—Ç: –≤ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –ø–µ—Ä–∏–æ–¥–∞, –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ\n\
                    –∏ –∫–∞–∂–¥—ã–π –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 3 –¥–Ω–µ–π. –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–µ–∫—Ä–∞—â–∞—é—Ç—Å—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞.";
                
                bot.send_message(chat_id, help_text)
                    .reply_markup(create_reminder_menu())
                    .await?;
            }
            "counters_menu" => {
                bot.send_message(chat_id, "üè† –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—á–µ—Ç—á–∏–∫–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
                    .reply_markup(create_counters_menu())
                    .await?;
            }
            "counter_water" => {
                {
                    let mut states = user_states.lock().await;
                    states.insert(chat_id, UserState::WaitingForWaterPeriod);
                }
                let user = storage.get_user_reminders(chat_id).await;
                let info = user.reminders.get("water").map(|r| format!("–¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥: {}‚Äì{}", r.start_day, r.end_day)).unwrap_or_else(|| "–ü–µ—Ä–∏–æ–¥ –Ω–µ –∑–∞–¥–∞–Ω".to_string());
                bot.send_message(
                    chat_id,
                    format!(
                        "üíß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞ –≤–æ–¥—ã\n{}\n\n–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –Ω–∞—á–∞–ª–æ-–∫–æ–Ω–µ—Ü (–Ω–∞–ø—Ä–∏–º–µ—Ä, 16-25)",
                        info
                    )
                ).await?;
            }
            "counter_electricity" => {
                {
                    let mut states = user_states.lock().await;
                    states.insert(chat_id, UserState::WaitingForElectricityPeriod);
                }
                let user = storage.get_user_reminders(chat_id).await;
                let info = user.reminders.get("electricity").map(|r| format!("–¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥: {}‚Äì{}", r.start_day, r.end_day)).unwrap_or_else(|| "–ü–µ—Ä–∏–æ–¥ –Ω–µ –∑–∞–¥–∞–Ω".to_string());
                bot.send_message(
                    chat_id,
                    format!(
                        "‚ö° –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞\n{}\n\n–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –Ω–∞—á–∞–ª–æ-–∫–æ–Ω–µ—Ü (–Ω–∞–ø—Ä–∏–º–µ—Ä, 16-25)",
                        info
                    )
                ).await?;
            }
            "toggle_reminders" => {
                match storage.toggle_global_reminders(chat_id).await {
                    Ok(enabled) => {
                        let status = if enabled { "–≤–∫–ª—é—á–µ–Ω—ã ‚úÖ" } else { "–æ—Ç–∫–ª—é—á–µ–Ω—ã ‚ùå" };
                        bot.send_message(chat_id, format!("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {}", status))
                            .reply_markup(create_reminder_menu())
                            .await?;
                    }
                    Err(_) => {
                        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
                            .reply_markup(create_reminder_menu())
                            .await?;
                    }
                }
            }
            data if data.starts_with("sent_yes_") => {
                let counter_type_str = data.strip_prefix("sent_yes_").unwrap();
                if let Some(counter_type) = CounterType::from_str(counter_type_str) {
                    if let Err(_) = storage.mark_counter_completed(chat_id, counter_type.clone()).await {
                        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")
                            .await?;
                    } else {
                        bot.send_message(
                            chat_id, 
                            format!("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ü–æ–∫–∞–∑–∞–Ω–∏—è {} –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ.\n–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞.", counter_type.display_name())
                        ).await?;
                    }
                }
            }
            data if data.starts_with("sent_no_") => {
                let counter_type_str = data.strip_prefix("sent_no_").unwrap();
                if let Some(counter_type) = CounterType::from_str(counter_type_str) {
                    bot.send_message(
                        chat_id, 
                        format!("‚è∞ –•–æ—Ä–æ—à–æ, —è –ø—Ä–æ–¥–æ–ª–∂—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –ø–æ–∫–∞–∑–∞–Ω–∏—è—Ö {}.\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ö –≤–æ–≤—Ä–µ–º—è!", counter_type.display_name())
                    ).await?;
                }
            }
            _ => {}
        }
        
        bot.answer_callback_query(q.id).await?;
    }
    
    Ok(())
}