use teloxide::prelude::*;

use crate::models::{UserState, UserStates};
use crate::storage::MemoryStorage;
use crate::utils::create_main_menu;

pub async fn handle_callback(
    bot: Bot,
    q: CallbackQuery,
    storage: MemoryStorage,
    user_states: UserStates,
) -> ResponseResult<()> {
    if let Some(data) = &q.data {
        let chat_id = q.message.as_ref().unwrap().chat.id;
        
        match data.as_str() {
            "add_task" => {
                {
                    let mut states = user_states.lock().await;
                    states.insert(chat_id, UserState::WaitingForTask);
                }
                
                bot.send_message(chat_id, "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏:")
                    .await?;
            }
            "add_list" => {
                {
                    let mut states = user_states.lock().await;
                    states.insert(chat_id, UserState::WaitingForTaskList);
                }
                
                bot.send_message(
                    chat_id, 
                    "üìù –í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á (–∫–∞–∂–¥–∞—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):\n\n\
                    –ü—Ä–∏–º–µ—Ä—ã:\n\
                    ‚Ä¢ –ö—É–ø–∏—Ç—å —Ö–ª–µ–±\n\
                    ‚Ä¢ –ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ\n\
                    ‚Ä¢ –°–¥–µ–ª–∞—Ç—å –¥–æ–º–∞—à–∫—É\n\n\
                    –ò–ª–∏:\n\
                    1. –ü–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞\n\
                    2. –í—Ç–æ—Ä–∞—è –∑–∞–¥–∞—á–∞\n\
                    3. –¢—Ä–µ—Ç—å—è –∑–∞–¥–∞—á–∞"
                ).await?;
            }
            "list_tasks" => {
                let todos = storage.get_tasks(chat_id).await;

                if !todos.is_empty() {
                    let mut response = "üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n".to_string();
                    for (index, todo) in todos.iter().enumerate() {
                        let status = if todo.is_completed() { "‚úÖ" } else { "‚è≥" };
                        response.push_str(&format!("{}. {} {}\n", index + 1, status, todo.text));
                    }
                    bot.send_message(chat_id, response)
                        .reply_markup(create_main_menu())
                        .await?;
                } else {
                    bot.send_message(chat_id, "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
                        .reply_markup(create_main_menu())
                        .await?;
                }
            }
            "mark_done" => {
                let todos = storage.get_tasks(chat_id).await;
                
                if !todos.is_empty() {
                    {
                        let mut states = user_states.lock().await;
                        states.insert(chat_id, UserState::WaitingForTaskNumber);
                    }
                    
                    bot.send_message(chat_id, "üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π:")
                        .await?;
                } else {
                    bot.send_message(chat_id, "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏.")
                        .reply_markup(create_main_menu())
                        .await?;
                }
            }
            "remove_task" => {
                let todos = storage.get_tasks(chat_id).await;
                
                if !todos.is_empty() {
                    bot.send_message(chat_id, "üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
                        .await?;
                } else {
                    bot.send_message(chat_id, "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
                        .reply_markup(create_main_menu())
                        .await?;
                }
            }
            "clear_all" => {
                storage.clear_tasks(chat_id).await;
                
                bot.send_message(chat_id, "üßπ –í—Å–µ –∑–∞–¥–∞—á–∏ –æ—á–∏—â–µ–Ω—ã")
                    .reply_markup(create_main_menu())
                    .await?;
            }
            "help" => {
                let help_text = "üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n\
                    üîπ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã\n\
                    üîπ –ò–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n\n\
                    /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\
                    /add <—Ç–µ–∫—Å—Ç> - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n\
                    /list - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏\n\
                    /done <–Ω–æ–º–µ—Ä> - –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π\n\
                    /remove <–Ω–æ–º–µ—Ä> - —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É\n\
                    /clear - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏\n\n\
                    üí° –°–æ–≤–µ—Ç: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ - —ç—Ç–æ —É–¥–æ–±–Ω–µ–µ!";
                
                bot.send_message(chat_id, help_text)
                    .reply_markup(create_main_menu())
                    .await?;
            }
            _ => {}
        }
        
        bot.answer_callback_query(q.id).await?;
    }
    
    Ok(())
}