use std::time::Duration;
use chrono::{Utc, TimeZone, Timelike, Datelike};
use chrono_tz::Europe::Moscow;
use teloxide::prelude::*;
use tokio::time::interval;

use crate::storage::JsonStorage;
use crate::utils::create_reminder_response_keyboard;

pub struct ReminderSystem {
    bot: Bot,
    storage: JsonStorage,
}

impl ReminderSystem {
    pub fn new(bot: Bot, storage: JsonStorage) -> Self {
        Self { bot, storage }
    }

    pub async fn start(&self) {
        log::info!("Starting reminder system...");
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —á–∞—â–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –æ–∫–Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∏
        let mut interval = interval(Duration::from_secs(15 * 60)); // –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
        
        loop {
            interval.tick().await;
            
            if let Err(e) = self.check_and_send_reminders().await {
                log::error!("Error in reminder system: {}", e);
            }
        }
    }

    async fn check_and_send_reminders(&self) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
        log::info!("Checking reminders...");

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–µ—Å—è—Ü–∞
        if let Err(e) = self.storage.reset_monthly_statuses().await {
            log::error!("Failed to reset monthly statuses: {}", e);
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
        let moscow_now = Moscow.from_utc_datetime(&Utc::now().naive_utc());
        let today = moscow_now.date_naive();
        let current_hour = moscow_now.hour();

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–∫–æ–ª–æ 20:00 –ø–æ –ú–æ—Å–∫–≤–µ, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–µ–π –≤ —Å—É—Ç–∫–∏
        if current_hour < 19 || current_hour > 21 {
            log::debug!("Not reminder window (current hour: {})", current_hour);
            return Ok(());
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        let all_reminders = self.storage.get_all_reminders().await;

        for (chat_id_str, user_reminders) in all_reminders {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –≥–ª–æ–±–∞–ª—å–Ω–æ
            if !user_reminders.global_enabled {
                continue;
            }

            let chat_id = match chat_id_str.parse::<i64>() {
                Ok(id) => ChatId(id),
                Err(_) => continue,
            };

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–ø —Å—á–µ—Ç—á–∏–∫–∞
            for (_, reminder) in &user_reminders.reminders {
                if reminder.should_remind_today(today) {
                    // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Å—É—Ç–æ–∫
                    if let Some(last) = &reminder.last_sent_date {
                        if last == &today.format("%Y-%m-%d").to_string() {
                            continue;
                        }
                    }
                    if let Err(e) = self.send_reminder(chat_id, reminder).await {
                        log::error!("Failed to send reminder to {}: {}", chat_id, e);
                    } else {
                        // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ
                        if let Err(e) = self.mark_reminder_sent(chat_id, &reminder.counter_type, today).await {
                            log::error!("Failed to mark reminder as sent: {}", e);
                        }
                    }
                }
            }
        }

        Ok(())
    }

    async fn send_reminder(
        &self,
        chat_id: ChatId,
        reminder: &crate::models::CounterReminder,
    ) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
        let moscow_now = Moscow.from_utc_datetime(&Utc::now().naive_utc());
        let today = moscow_now.date_naive();
        let day = today.day();

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        let reminder_type = if day == reminder.start_day {
            "–ù–∞—á–∞–ª—Å—è –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–∞—á–∏ –ø–æ–∫–∞–∑–∞–Ω–∏–π"
        } else if day > reminder.end_day.saturating_sub(3) {
            "–°–∫–æ—Ä–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–∞—á–∏ –ø–æ–∫–∞–∑–∞–Ω–∏–π"
        } else {
            "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–¥–∞—á–µ –ø–æ–∫–∞–∑–∞–Ω–∏–π"
        };

        let message = format!(
            "‚è∞ {}\n\n\
            {}\n\
            üìÖ –ü–µ—Ä–∏–æ–¥: —Å {} –ø–æ {} —á–∏—Å–ª–æ\n\
            üìä –°–µ–≥–æ–¥–Ω—è: {} —á–∏—Å–ª–æ\n\n\
            –û—Ç–ø—Ä–∞–≤–∏–ª–∏ –ª–∏ –≤—ã –ø–æ–∫–∞–∑–∞–Ω–∏—è?",
            reminder_type,
            reminder.counter_type.display_name(),
            reminder.start_day,
            reminder.end_day,
            day
        );

        self.bot
            .send_message(chat_id, message)
            .reply_markup(create_reminder_response_keyboard(reminder.counter_type.as_str()))
            .await?;

        log::info!("Sent reminder for {} to {}", reminder.counter_type.as_str(), chat_id);
        Ok(())
    }

    async fn mark_reminder_sent(
        &self,
        chat_id: ChatId,
        counter_type: &crate::models::CounterType,
        date: chrono::NaiveDate,
    ) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
        let mut user_reminders = self.storage.get_user_reminders(chat_id).await;
        
        if let Some(reminder) = user_reminders.get_reminder_mut(counter_type) {
            reminder.mark_sent(date);
            self.storage.save_user_reminders(chat_id, user_reminders).await?;
        }

        Ok(())
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
    #[allow(dead_code)]
    pub async fn test_reminders(&self) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
        log::info!("Testing reminders (ignoring time check)...");

        let moscow_now = Moscow.from_utc_datetime(&Utc::now().naive_utc());
        let today = moscow_now.date_naive();

        let all_reminders = self.storage.get_all_reminders().await;

        for (chat_id_str, user_reminders) in all_reminders {
            if !user_reminders.global_enabled {
                continue;
            }

            let chat_id = match chat_id_str.parse::<i64>() {
                Ok(id) => ChatId(id),
                Err(_) => continue,
            };

            for (_, reminder) in &user_reminders.reminders {
                if reminder.should_remind_today(today) {
                    self.send_reminder(chat_id, reminder).await?;
                    self.mark_reminder_sent(chat_id, &reminder.counter_type, today).await?;
                }
            }
        }

        Ok(())
    }
}